
https://projects.raspberrypi.org/en/projects/getting-started-with-git/



git config --global user.name "kim hailey"
git config --global user.email "kimh@transmute.com"
git config --global core.editor mousepad

cd projects
git init



git add --all
git commit -am 'first rpi commit'
git status


git log p6.c		to see changes to p6.c
git diff

To push the local repository to github, 

( only once to start ) git remote add origin https://github.com/transmute-inc/projects.git
git push -u origin master  (user=transmute-inc  pass=Proton2021!)



*******  clone repository after building a new rpi OS
git clone https://github.com/transmute-inc/projects

add file .gitignore to directory to avoid adding temporary files to repository.
    *.o
    *.png
    *.dat
    p8		(executable)

vimdiff  

Usefull git commands
git clone --shallow  blah     #only downloads current snapshot - no history
git pull

************** what to do it your head is detached ****************
use This is a good answer, but I think there is no need for the temp branch
 (although I usually use one my self). 
git branch -f master HEAD && git checkout master 
is enough -- assuming your goal is to keep your current head 
but to designate it as master. Other goals also make sense, and 
call for other recipes.


https://stackoverflow.com/questions/5772192/how-can-i-reconcile-detached-head-with-master-origin

To recover from your situation, you should create a branch that points to the commit currently pointed to by your detached HEAD:

git branch temp
git checkout temp
(these two commands can be abbreviated as git checkout -b temp)

This will reattach your HEAD to the new temp branch.

Next, you should compare the current commit (and its history) with the normal branch on which you expected to be working:

git log --graph --decorate --pretty=oneline --abbrev-commit master origin/master temp
git diff master temp
git diff origin/master temp
(You will probably want to experiment with the log options: add -p, leave off --pretty=â€¦ to see the whole log message, etc.)

If your new temp branch looks good, you may want to update (e.g.) master to point to it:

git branch -f master temp
git checkout master
(these two commands can be abbreviated as git checkout -B master temp)

You can then delete the temporary branch:

git branch -d temp
Finally, you will probably want to push the reestablished history:

git push origin master



